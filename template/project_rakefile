require 'rubygems'

################################################################################
# Options
################################################################################

OPT = {}
OPT[:project_name] = '$$PROJECT_NAME$$'
OPT[:assets_dir]   = 'assets'
OPT[:bin_dir]      = 'bin'
OPT[:lib_dir]      = 'lib'
OPT[:src_dir]      = 'src'
OPT[:libraries]    = %W(exib).map { |lib| File.join(OPT[:lib_dir], lib) }.join(',')

OPT[:deliverables] = %w(bin/*)
OPT[:package_date] = '%Y.%m.%d.%H%M'

OPT[:project_file] = "#{OPT[:project_name].capitalize}.as"
OPT[:output_file]  = "#{OPT[:project_name].downcase}.swf"
OPT[:factory_file] = 'Factory.as'
OPT[:project_path] = File.join(OPT[:src_dir], OPT[:project_file])
OPT[:output_path]  = File.join(OPT[:bin_dir], OPT[:output_file])
OPT[:factory_path] = File.join(OPT[:src_dir], OPT[:factory_file])

OPT[:flash_player] = '/Applications/Flash\ Player.app'

################################################################################
# Deploy
################################################################################

task :default => :go

desc 'Embed and compile for delivery'
task :deploy => [:embed, :compile]

desc 'Embed, compile for debugging, and open the application'
task :go => [:embed, :debug, :open]

desc 'Compile the application'
task :compile do
  compile(false)
end

desc 'Compile the application with debugging enabled'
task :debug do
  compile(true)
end

desc 'Open the compiled application'
task :open do
  sh %{ fdb #{OPT[:output_path]} }
end

def compile(debug = false)
  sh %{ mxmlc -frame main -use-network=false -debug=#{debug} -compiler.source-path=#{OPT[:src_dir]},#{OPT[:libraries]} -output #{OPT[:output_path]} #{OPT[:project_path]} }
end

################################################################################
# Embedding
################################################################################

desc 'Automatically embed all available assets'
task :embed do
  require 'tempfile'
  
  font_asset    = { :path => 'assets/fonts',    :glob => '*.{ttf,otf}',         :template => %q([Embed(source='#FILE_NAME#', fontName='#FONT_NAME#', advancedAntiAliasing='true', mimeType='application/x-font')]) }
  graphic_asset = { :path => 'assets/graphics', :glob => '*.{png,jpg,gif,svg}', :template => %q([Embed(source='#FILE_NAME#')]) }
  sound_asset   = { :path => 'assets/sounds',   :glob => '*.mp3',               :template => %q([Embed(source='#FILE_NAME#', mimeType='audio/mpeg')]) }
  video_asset   = { :path => 'assets/videos',   :glob => '*.swf',               :template => %q([Embed(source='#FILE_NAME#')]) }
  
  class_template = 'public var #FILE_NAME#:Class'
  embed_buffer   = ''

  [font_asset, graphic_asset, sound_asset, video_asset].each do |asset|
    files = Dir.glob("#{asset[:path]}/#{asset[:glob]}")
    files.map! { |f| [File.join('..', asset[:path], File.basename(f)), File.basename(f)] }
    
    files.each do |file|
      case asset[:path]
      when /fonts/
        embed_buffer << asset[:template].gsub('#FILE_NAME#', file.first).gsub('#FONT_NAME#', File.basename(file.last, '.*'))
      else
        embed_buffer << asset[:template].gsub('#FILE_NAME#', file.first)
      end
      
      embed_buffer << "\n" + class_template.gsub('#FILE_NAME#', File.basename(file.last, '.*')) + "\n\n"
    end
  end
  
  tmp         = Tempfile.new(OPT[:project_path])
  begin_embed = /(\s+)\/\/ BEGIN AUTO EMBED/
  end_embed   = /\/\/ END AUTO EMBED/
  
  File.open(OPT[:project_path]) do |file|
    file.each_line do |line|
      remove_embed, indent = true, $1 if line =~ begin_embed
      remove_embed = false if line =~ end_embed
      
      tmp << line unless remove_embed and line !~ begin_embed
      tmp << embed_buffer.split(/\n/).map! { |l| indent + l }.join("\n") + "\n" if line =~ begin_embed
    end
  end
  
  tmp.open
  cp tmp.path, OPT[:project_path]
end

################################################################################
# Packaging
################################################################################

desc 'Packages the necessary files into a deliverable archive'
task :package do
  require 'time'
  
  package_name = "#{OPT[:project_name]}_#{Time.now.strftime(OPT[:package_date])}.zip"
  package_path = File.join('deliver', package_name)
  
  begin
    sh %{ 7za a -mx=9 -mmt=on #{package_path} #{OPT[:deliverables].join(' ')} }
  rescue
    STDERR.puts '7za was not found. Unable to create zip.'
  end
end
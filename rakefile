require 'rake'
require 'rdiscount'

# Exib Tasks  ------------------------------------------------------------------

DESTINATION = ENV['DEST'] || File.expand_path("~/Desktop/exib_project")

BASE_DIRS   = %w(assets debug deploy deliver doc source)
ASSET_DIRS  = %w(config fonts graphics sounds videos)

namespace :exib do
  desc "Generates a new EXIB project"
  task :build => [ :make_dir_structure, :copy_files, :generate_docs, :init_repo ]
end

# Make Directory Structure -----------------------------------------------------

def make_dest_dirs(dirs, path = '.')
  mkdir_p dirs.map { |dir| File.join(DESTINATION, path.to_s, dir) } 
end

task :make_dir_structure => [ :make_base_dirs, :make_asset_dirs]

task(:make_base_dirs)  { make_dest_dirs BASE_DIRS            }
task(:make_asset_dirs) { make_dest_dirs ASSET_DIRS, 'assets' }

# Copy Files -------------------------------------------------------------------

def write_and_replace_token(source, output, token, replace)
  File.open(source, 'r') do |file|
    File.open(output, 'w') do |dest|
      file.each_line { |line| dest << line.gsub(token, replace) }
    end
  end
end

task :copy_files => [:copy_config, :copy_rake, :copy_satellite, :copy_app]

task(:copy_config)   { cp 'template/config_template.exml',  File.join(DESTINATION, 'assets/config/config.exml') }
task(:copy_rake)     { cp 'template/project_rakefile',      File.join(DESTINATION, 'rakefile')                  }
task(:copy_satellite) { cp 'template/satellite.swf',        File.join(DESTINATION, 'debug/satellite.swf')       }

task(:copy_app) do
  application_name  = File.basename(DESTINATION).gsub(/\/(.?)/) { "::" + $1.upcase}.gsub(/(^|_)(.)/) { $2.upcase }
  application_dest  = File.join(DESTINATION, "source/#{application_name}.as")
  factory_dest      = File.join(DESTINATION, 'source/Factory.as')
  application_token = '#APPLICATION_NAME#'
  
  write_and_replace_token('template/application_template.as', application_dest, application_token, application_name)
  write_and_replace_token('template/factory_template.as', factory_dest, application_token, application_name)
end

# Generate Documentation -------------------------------------------------------

task :generate_docs do
  require 'rdiscount'
  source = 'doc/README.txt'
  target = File.join(DESTINATION, 'doc', 'README.html')
  
  unless uptodate?(target, source)
    File.open(target, "w") do |f|
      f << RDiscount.new(File.read(source)).to_html
    end
  end
end

# Initialize Repository --------------------------------------------------------

task :init_repo do
  ignore = %w(*._* *.DS_Store *.exe *.zip deploy/*.swf)
  File.open("#{DESTINATION}/.gitignore", "w+") do |file|
    file << "syntax: glob\n"
    ignore.each { |glob| file << "#{glob}\n" }
  end
  
  original_dir = pwd
  chdir DESTINATION
  
  sh %{git init}
  sh %{git add .}
  sh %{git commit -m "#{File.basename(DESTINATION)} initialized"}
  
  chdir original_dir
end

# ActionScript Tasks -----------------------------------------------------------

BANNER = "\n\n#{'#'*80}\n\n"
TEST_BASENAME = ENV['TEST'] || 'ExibTestRunner'

namespace :as do
  desc "Generates ASDoc documentation for the main EXIB project"
  task :asdoc => [ :generate_asdocs ]
  
  desc "Runs ASUnit testing for the EXIB project"
  task :test => [ :compile_asunit, :run_compiled_test ]
  
  desc "Open the LoggerSatellite for debugging"
  task :satellite => [ :open_logger_satellite ]
end

# Generate ASDoc Structure -----------------------------------------------------

task :generate_asdocs do
  asdoc_bin  = '/opt/flex/bin/asdoc'
  source_dir = File.expand_path('./source')
  asdocs_dir = 'doc/asdoc'
  
  sh   %{#{asdoc_bin} -source-path #{source_dir} -doc-sources #{source_dir}}
  mv   'asdoc-output/*', asdocs_dir
  rm_r 'asdoc-output'
end

# Logger satellite --------------------------------------------------------------

task :open_logger_satellite do
  sh %{open satellite/LoggerSatellite.swf}
end

# Run ASUnit Tests -------------------------------------------------------------

task :compile_asunit do
  puts BANNER
  
  mxmlc_bin    = '/opt/flex/bin/mxmlc'
  source_paths = ['source', '/opt', '/Applications/Adobe\ Flash\ CS4/Common/Configuration/ActionScript\ 3.0/projects/Flash/src/']
  
  sh %{#{mxmlc_bin} -use-network=false -compiler.source-path=#{source_paths.join(',')} test/#{TEST_BASENAME}.mxml}
  
  puts BANNER
end

task :run_compiled_test do
  sh %{open test/#{TEST_BASENAME}.swf -a '/Applications/Flash\ Player.app'}
end
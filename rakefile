require 'rake'
require 'rdiscount'

task :default => :test

task(:test) {}

# Exib Tasks  ------------------------------------------------------------------

DESTINATION = ENV['DEST'] || "./exib_project"

BANNER      = "\n\n#{'#'*80}\n\n"

BASE_DIRS   = %w(assets deploy deliver doc source)
ASSET_DIRS  = %w(config fonts graphics sounds videos)
RAKEFILE    = 'tasks/project.rake'
CONFIG      = 'template/config.exml'
MXML        = 'template/exib_app.mxml'

namespace :exib do
  desc "Generates a new EXIB project"
  task :build => [ :make_dir_structure, :copy_files, :generate_docs, :init_repo ]
end

# ActionScript Tasks -----------------------------------------------------------

TEST_BASENAME = ENV['TEST'] || 'ExibTestRunner'
USE_FLASH     = ENV['FLASH'] || false

namespace :as do
  desc "Generates ASDoc documentation for the main EXIB project"
  task :asdoc => [ :generate_asdocs ]
  
  desc "Runs ASUnit testing for the EXIB project"
  task :test => [ :compile_asunit, :run_compiled_test ]
  
  desc "Open the Logger Satelite for debugging"
  task :satelite => [ :open_logger_satelite ]
end

# Make Directory Structure -----------------------------------------------------

def make_dest_dirs(dirs, path = '.')
  mkdir_p dirs.map { |dir| File.join(DESTINATION, path.to_s, dir) } 
end

desc "Make the directory structure for the new EXIB project"
task :make_dir_structure => [ :make_base_dirs, :make_asset_dirs]

task(:make_base_dirs)  { make_dest_dirs BASE_DIRS            }
task(:make_asset_dirs) { make_dest_dirs ASSET_DIRS, 'assets' }

# Copy Files -------------------------------------------------------------------

desc "Copy the necessary files"
task :copy_files => [:copy_config, :copy_mxml, :copy_rake]

task(:copy_config) { cp CONFIG,   File.join(DESTINATION, 'assets/config/config.exml') }
task(:copy_mxml)   { cp MXML,     File.join(DESTINATION, "source/#{File.basename(DESTINATION)}.mxml") }
task(:copy_rake)   { cp RAKEFILE, File.join(DESTINATION, 'rakefile') }

# Generate Documentation -------------------------------------------------------

desc "Generate the config API documentation"
task :generate_docs do
  require 'rdiscount'
  source = 'doc/README.txt'
  target = File.join(DESTINATION, 'doc', 'README.html')
  
  unless uptodate?(target, source)
    File.open(target, "w") do |f|
      f << RDiscount.new(File.read(source)).to_html
    end
  end
end

# Initialize Repository --------------------------------------------------------

desc "Automate the common task of initializing a Mercurial repo for the project"
task :init_repo do
  ignore = %w(*._* *.DS_Store *.swf *.exe *.zip)
  File.open("#{DESTINATION}/.gitignore", "w+") do |file|
    file << "syntax: glob\n"
    ignore.each { |glob| file << "#{glob}\n" }
  end
  
  original_dir = pwd
  chdir DESTINATION
  
  sh %{git init}
  sh %{git add .}
  sh %{git commit -m "#{File.basename(DESTINATION)} initialized"}
  
  chdir original_dir
end

# Generate ASDoc Structure -----------------------------------------------------

desc "Generate ASDocs"
task :generate_asdocs do
  asdoc_bin  = '/opt/flex/bin/asdoc'
  source_dir = File.expand_path('./source')
  asdocs_dir = 'doc/asdoc'
  
  sh   %{#{asdoc_bin} -source-path #{source_dir} -doc-sources #{source_dir}}
  mv   'asdoc-output/*', asdocs_dir
  rm_r 'asdoc-output'
end

# Logger Satelite --------------------------------------------------------------

desc "Opens the logger satelite"
task :open_logger_satelite do
  sh %{open satelite/LoggerSatelite.swf}
end

# Run ASUnit Tests -------------------------------------------------------------

desc "Compile ASUnit tests"
task :compile_asunit do
  puts BANNER
  
  mxmlc_bin    = '/opt/flex/bin/mxmlc'
  source_paths = ['source', '/opt', '/Applications/Adobe\ Flash\ CS4/Common/Configuration/ActionScript\ 3.0/projects/Flash/src/']
  
  sh %{#{mxmlc_bin} -use-network=false -compiler.source-path=#{source_paths.join(',')} test/#{TEST_BASENAME}.mxml}
  
  puts BANNER
end

desc "Runs the test compiled by compile_asunit"
task :run_compiled_test do
  sh %{open test/#{TEST_BASENAME}.swf -a '/Applications/Flash\ Player.app'}
end
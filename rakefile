require 'rubygems'

################################################################################
# Options
################################################################################

OPT = {}
OPT[:project_name] = 'exib'
OPT[:src_dir]      = 'src'
OPT[:bin_dir]      = 'bin'
OPT[:libraries]    = %W(/opt/aslib/asunit)

OPT[:test_dir]     = 'test'
OPT[:test_suite]   = 'UnitTests.as'
OPT[:test_runner]  = 'ExibRunner.as'
OPT[:runner_path]  = File.join(OPT[:test_dir], OPT[:test_runner])

OPT[:base_dirs]    = %w(assets bin doc src)
OPT[:asset_dirs]   = %w(config fonts graphics sounds videos)

################################################################################
# Exib Tasks
################################################################################

DESTINATION = ENV['DEST'] || File.expand_path("~/Desktop/exib_project")

namespace :exib do
  desc "Generates a new EXIB project"
  task :build => [ :make_dir_structure, :copy_files, :generate_docs, :init_repo ]
end

# Make Directory Structure -----------------------------------------------------

def make_dest_dirs(dirs, path = '.')
  mkdir_p dirs.map { |dir| File.join(DESTINATION, path.to_s, dir) } 
end

task :make_dir_structure => [ :make_base_dirs, :make_asset_dirs]

task(:make_base_dirs)  { make_dest_dirs OPT[:base_dirs]            }
task(:make_asset_dirs) { make_dest_dirs OPT[:asset_dirs], 'assets' }

# Copy Files -------------------------------------------------------------------

def write_and_replace_token(source, output, token, replace)
  File.open(source, 'r') do |file|
    File.open(output, 'w') do |dest|
      file.each_line { |line| dest << line.gsub(token, replace) }
    end
  end
end

task :copy_files => [:copy_config, :copy_rake, :copy_satellite, :copy_app]

task(:copy_config)   { cp 'template/config_template.exml',  File.join(DESTINATION, 'assets/config/config.exml') }
task(:copy_rake)     { cp 'template/project_rakefile',      File.join(DESTINATION, 'rakefile')                  }

task(:copy_app) do
  application_name  = File.basename(DESTINATION).gsub(/\/(.?)/) { "::" + $1.upcase}.gsub(/(^|_)(.)/) { $2.upcase }
  application_dest  = File.join(DESTINATION, "source/#{application_name}.as")
  factory_dest      = File.join(DESTINATION, 'source/Factory.as')
  application_token = '#APPLICATION_NAME#'
  
  write_and_replace_token('template/application_template.as', application_dest, application_token, application_name)
  write_and_replace_token('template/factory_template.as', factory_dest, application_token, application_name)
end

# Generate Documentation -------------------------------------------------------

task :generate_docs do
  # require 'rdiscount'
  # source = 'doc/README.txt'
  # target = File.join(DESTINATION, 'doc', 'README.html')
  # 
  # unless uptodate?(target, source)
  #   File.open(target, "w") do |f|
  #     f << RDiscount.new(File.read(source)).to_html
  #   end
  # end
end

# Initialize Repository --------------------------------------------------------

task :init_repo do
  ignore = %w(*._* *.DS_Store *.exe *.zip deploy/*.swf)
  File.open("#{DESTINATION}/.gitignore", "w+") do |file|
    file << "syntax: glob\n"
    ignore.each { |glob| file << "#{glob}\n" }
  end
  
  original_dir = pwd
  chdir DESTINATION
  
  sh %{git init}
  sh %{git add .}
  sh %{git commit -m "#{File.basename(DESTINATION)} initialized"}
  
  chdir original_dir
end

################################################################################
# Testing Tasks
################################################################################

namespace :test do
  desc 'Compile and run the test harness'
  task :units => :link_units do
    sh %{ mxmlc -use-network=false -debug=true -compiler.source-path=#{OPT[:src_dir]},#{OPT[:libraries]} #{OPT[:runner_path]} }
    sh %{ fdb #{OPT[:runner_path].gsub('as', 'swf')} }
  end
  
  desc 'Find all unit tests and auto-fill the test harness'
  task :link_units do
    require 'tempfile'
    
    tests = Dir.glob("#{OPT[:test_dir]}/unit/*Test.as").join(', ').gsub('test/unit/', '').gsub('.as', '')
    temp  = Tempfile.new('units')

    File.open(File.join(OPT[:test_dir], OPT[:test_suite])) do |file|
      file.each_line do |line|
        if line =~ /(\s+)?(.*)\/\/ AUTO$/
          temp << "#{$1}#{tests} // AUTO\n"
        else
          temp << line
        end
      end
    end
    
    temp.open
    cp temp.path, File.join(OPT[:test_dir], OPT[:test_suite])
  end
end